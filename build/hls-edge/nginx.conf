worker_processes 1;

events {
    worker_connections 1024;
}

env SRV_RESOLVERS;

http {
    lua_shared_dict srv_proxy_cache 1m;
    
    access_log /dev/stdout;
    error_log /dev/stderr;

    proxy_cache_path  /tmp/cache levels=1:2 keys_zone=hls-cache:8m max_size=1000m inactive=600m;

    map $request_uri $snapshot_uri {
      ~/snapshot/(?<snapshot>[^?]*).(jpg) $snapshot;
    }

    map $request_uri $m3u8_uri {
      ~/hls/(?<m3u8>[^?]*).m3u8 $m3u8;
    }

    map $request_uri $chunk_uri {
      ~/hls/(?<chunk>[^?]*)-(.*).(ts|trp) $chunk;
    }

    server {
        listen 80;

        root /tmp;
        proxy_temp_path /tmp/temp; 

        location /snapshot/ {

            set_by_lua $srv_resolvers 'return os.getenv("SRV_RESOLVERS")';
            set $srv_service "_http._$snapshot_uri.origin.hls.datarhei._tcp.marathon.mesos";

            proxy_cache hls-cache;
            proxy_cache_valid 200 10m;
            proxy_cache_valid 404 5s;

            add_header "Edge-Cache-Type" "Cached JPG";

            content_by_lua "
                local proxy = require 'modfin.srv_proxy'
                proxy.set('resolvers', ngx.var.srv_resolvers)
                proxy.pass(ngx.var.srv_service)
            ";
        }

        location ~* .(m3u8)$ {

            set_by_lua $srv_resolvers 'return os.getenv("SRV_RESOLVERS")';
            set $srv_service "_http._$m3u8_uri.origin.hls.datarhei._tcp.marathon.mesos";

            add_header "Edge-Cache-Type" "No cache";

            content_by_lua "
                local proxy = require 'modfin.srv_proxy'
                proxy.set('resolvers', ngx.var.srv_resolvers)
                proxy.pass(ngx.var.srv_service)
            ";
        }

        location ~* .(ts|trp)$ {

            set_by_lua $srv_resolvers 'return os.getenv("SRV_RESOLVERS")';
            set $srv_service "_http._$chunk_uri.origin.hls.datarhei._tcp.marathon.mesos";

            proxy_cache hls-cache;
            proxy_cache_valid 200 10m;
            proxy_cache_valid 404 5s;

            add_header "Edge-Cache-Type" "Cached TS";

            content_by_lua "
                local proxy = require 'modfin.srv_proxy'
                proxy.set('resolvers', ngx.var.srv_resolvers)
                proxy.pass(ngx.var.srv_service)
            ";
        }
    }
}

daemon off;